{
  "name": "cookie-cutter",
  "description": "Browserify-compatible module to get and set cookies in the browser",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/cookie-cutter.git"
  },
  "main": "index.js",
  "keywords": [
    "cookie",
    "browser",
    "browserify"
  ],
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "cookie-cutter\n=============\n\nSet and get cookies in the browser or in node with `document`.\n\nIn your browser code with [browserify](github.com/substack/node-browserify):\n\n````javascript\nvar cookie = require('cookie-cutter');\nvar times = parseInt(cookie.get('times'), 10) || 0;\ncookie.set('times', times + 1);\n````\n\nand `times` will increment every time the page is reloaded.\n\nmethods\n=======\n\n````javascript\nvar cookie = require('cookie-cutter');\n````\n\ncookie(document)\n----------------\n\nReturn a new cookie object with `.get()` and `.set()` operating on `document`.\n\n`document.cookie` should be a non-referentially transparent setter/getter combo\nlike the DOM's variant where assignment with optional path and expiry creates a\nnew cookie in the getter as a key=value pair.\n\ncookie.get(key)\n---------------\n\nReturn the cookie value for `key`.\n\ncookie.set(key, value, opts={})\n-------------------------------\n\nSet the cookie at `key` to `value` with optional parameters `expiry` and `path`.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install cookie-cutter\n\nlicense\n=======\n\nMIT/X11\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/cookie-cutter/issues"
  },
  "_id": "cookie-cutter@0.1.0",
  "dist": {
    "shasum": "82b085b93de9ccfbdbee6de355302075475805d0"
  },
  "_from": "cookie-cutter@~0.1.0",
  "_resolved": "https://registry.npmjs.org/cookie-cutter/-/cookie-cutter-0.1.0.tgz"
}
