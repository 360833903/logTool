{
  "name": "persona-id",
  "version": "0.0.3",
  "description": "mozilla persona single sign-on without frameworks",
  "main": "index.js",
  "browser": "browser.js",
  "dependencies": {
    "inherits": "~2.0.0",
    "quotemeta": "~0.0.0",
    "hyperquest": "~0.1.6",
    "cookie-cutter": "~0.1.0",
    "concat-stream": "~1.0.0"
  },
  "devDependencies": {
    "ecstatic": "~0.4.2",
    "hyperstream": "~0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/persona-id.git"
  },
  "homepage": "https://github.com/substack/persona-id",
  "keywords": [
    "browser",
    "server",
    "mozilla",
    "persona",
    "auth",
    "authentication",
    "session",
    "user"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# persona-id\n\nEasily use [mozilla persona](https://login.persona.org/) for authentication.\n\n# example\n\nFirst we can make a simple core http server with some simple in-memory sessions.\nWhen the user is signed in, we'll update the `#whoami` element on the page to\nshow their persona id.\n\n``` js\nvar http = require('http');\nvar fs = require('fs');\nvar hyperstream = require('hyperstream');\nvar ecstatic = require('ecstatic')(__dirname + '/static');\n\nvar persona = require('persona-id')('http://localhost:5000');\n\nvar sessions = {};\npersona.on('create', function (sid, id) {\n    sessions[sid] = id.email;\n});\n\npersona.on('destroy', function (sid) {\n    delete sessions[sid];\n});\n\nvar server = http.createServer(function (req, res) {\n    if (persona.test(req)) {\n        persona.handle(req, res);\n    }\n    else if (req.url === '/') {\n        var sid = persona.getId(req);\n        fs.createReadStream(__dirname + '/static/index.html')\n            .pipe(hyperstream({ '#whoami': sessions[sid] || '' }))\n            .pipe(res)\n        ;\n    }\n    else ecstatic(req, res)\n});\nserver.listen(5000);\n```\n\nNow for the browser code:\n\n``` js\nvar http = require('http');\nvar persona = require('persona-id')();\n\npersona.on('login', function (id) {\n    button.value = 'unidentify';\n    whoami.textContent = id;\n});\n\npersona.on('logout', function () {\n    button.value = 'identify';\n    whoami.textContent = '';\n});\n\nvar button = document.getElementById('identify');\nvar whoami = document.getElementById('whoami');\n\nvar who = whoami.textContent;\npersona.set(who);\n\nbutton.addEventListener('click', function () {\n    if (!persona.id) {\n        persona.identify();\n    }\n    else persona.unidentify();\n});\n```\n\nHere we make an identify button and read the `#whoami` element that the server\nset to see if the server already knows who we are. You can use whatever\nmechanism you want to `.set()` the identity when the server knows it.\n\nThen just compile the browser code with browserify:\n\n```\n$ browserify browser.js > static/bundle.js\n```\n\nand run the server:\n\n```\n$ node server.js\n```\n\nYou now have a login button that persists across page loads!\n\nIt should be easy to extend the in-memory session to persist sessions to disk on\nyour own.\n\n# methods\n\n``` js\nvar persona = require('persona-id')\n```\n\n## server methods\n\n### var p = persona(opts)\n\nCreate a new persona instance `p` from some options `opts`:\n\n* opts.audience - the host:port of your server (mandatory)\n* opts.prefix - the prefix to use for internal routes, default: `'_persona'`\n* opts.verify - the verification endpoint to use, default:\nhttps://verifier.login.persona.org/verify\n* opts.sessionName - the session cookie name to use, default:\n`'_persona_session_id'`.\n\nIf `opts` is a string, its value will be used as the `opts.audience`.\n\n### p.test(req)\n\nReturn whether `p` knows how to handle the `req.method` and `req.url`.\n\n### p.handle(req, res)\n\nHandle the request, reading request data and sending responses for login and\nlogout requests.\n\n### p.getId(req)\n\nReturn the session id for `req.headers.cookie` given the `sessionName` set by\n`persona(opts)`.\n\n## server events\n\n### p.on('create', function (sid, id) {})\n\nWhen a new session is created, this event fires with the session id string `sid`\nand the `id` object, which has these properties: id.email, id.audience,\nid.expires, id.issuer.\n\n### p.on('destroy', function (sid) {})\n\nWhen a user logs out, this event fires with the session id.\n\n## browser methods\n\n### var p = persona()\n\nCreate a new persona instance `p`.\n\n### p.identify()\n\nSign in.\n\n### p.unidentify()\n\nSign out.\n\n### p.set(email)\n\nSet the persona id `email` string for when the server already knows from session\ndata that the user is authenticated.\n\n## browser events\n\n### p.on('login', function (id) {})\n\nWhen the user is known to be authenticated, this event fires with the persona id\nstring `id`.\n\n### p.on('logout', function () {})\n\nWhen the user is known to be unauthenticated, this event fires.\n\nNote that this event fires when `p.set(undefined)` is called too.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install persona-id\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/persona-id/issues"
  },
  "_id": "persona-id@0.0.3",
  "dist": {
    "shasum": "a47201cc5142cb678d86af742dea81b8bac832ab"
  },
  "_from": "persona-id@0.0.3",
  "_resolved": "https://registry.npmjs.org/persona-id/-/persona-id-0.0.3.tgz"
}
